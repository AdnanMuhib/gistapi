{"version":3,"sources":["components/Search.js","components/Header.js","GlobalStyle.js","services/gistService.js","components/GistHeader.js","components/Gist.js","components/GistList.js","App.js","index.js"],"names":["Wrapper","styled","div","InputBox","Input","input","Search","onSearchChange","useState","searchTerm","setSearchTerm","name","placeholder","onChange","e","target","value","onKeyUp","key","keyCode","Header","mega","GlobalStyles","createGlobalStyle","octokit","Octokit","UserImage","img","UserName","GistMeta","GistLeftMeta","GistRightMeta","GistWrapper","Link","a","GistHeader","gist_owner","gist_meta","avatar_url","user_name","login","profile_link","html_url","files","Object","keys","length","created_at","Date","toLocaleDateString","updated_at","href","src","alt","comments","GistDescription","p","GistFiles","Separator","hr","Gist","gist","owner","description","forks_url","comments_url","fileNames","map","f","raw_url","ErrorMessage","GistList","searchUserName","gists","setGists","errorMsg","setErrorMsg","useEffect","username","listForUser","then","response","data","Error","catch","err","message","listPublic","id","App","setSearchUserName","className","data-testid","GlobalStyle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5195f2b3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Octicon from \"react-octicon\";\r\n\r\nconst ENTER_BUTTON_CODE = 13;\r\nconst ENTER_BUTTON = \"Enter\";\r\n\r\nconst Search = ({ onSearchChange }) => {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  return (\r\n    <Wrapper>\r\n      <InputBox>\r\n        <Octicon name=\"search\" />\r\n        <Input\r\n          placeholder=\"Search Gists for the username\"\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n          onKeyUp={(e) => {\r\n            // for fallback support of keycode\r\n            const key = e.key || e.keyCode;\r\n            if (key === ENTER_BUTTON_CODE || key === ENTER_BUTTON) {\r\n              onSearchChange(e.target.value);\r\n            }\r\n            if (!e.target.value) {\r\n              onSearchChange(e.target.value);\r\n            }\r\n          }}\r\n          value={searchTerm}\r\n        />\r\n      </InputBox>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 8px;\r\n  background-color: #ffffff;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n  border-radius: 6px;\r\n  margin: 0 16px;\r\n`;\r\n\r\nconst InputBox = styled.div`\r\n  border-radius: 4px;\r\n  display: flex;\r\n  width: 400px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  border: none;\r\n  width: 100%;\r\n  font-size: 16px;\r\n\r\n  &:focus {\r\n    outline: 0;\r\n  }\r\n`;\r\nSearch.propTypes = {\r\n  onSearchChange: PropTypes.func.isRequired,\r\n};\r\nexport default Search;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Octicon from \"react-octicon\";\r\n// Custom imports\r\nimport Search from \"./Search\";\r\n\r\nfunction Header({ setSearchTerm }) {\r\n  return (\r\n    <Wrapper>\r\n      <Octicon name=\"mark-github\" mega />\r\n      <Search onSearchChange={setSearchTerm} />\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  background-color: #24292e;\r\n  color: #ffffff;\r\n  z-index: 32;\r\n  padding: 16px;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\n// param type checking\r\nHeader.propTypes = {\r\n  setSearchTerm: PropTypes.func.isRequired,\r\n};\r\nexport default Header;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n  body{\r\n    margin: 0;\r\n    font-family: Helvetica Neue,Helvetica,Segoe UI,Arial,freesans,sans-serif;\r\n    color: #626465;\r\n  }\r\n  *{\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyles;\r\n","import { Octokit } from \"@octokit/rest\";\r\nconst octokit = new Octokit()\r\n\r\nexport const getPublicGists = () => octokit.gists.listPublic()\r\n\r\nexport const getGistForUser = username =>  octokit.gists.listForUser({ username });","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Octicon from \"react-octicon\";\n\n// placeholder avatar in case of missing avatar for any user\nconst default_avatar_url =\n  \"https://avatars.githubusercontent.com/u/42755256?s=60&v=4\";\n\nconst GistHeader = ({ gist_owner, gist_meta }) => {\n  // retrieve gist author info from the owner object\n  const {\n    avatar_url = default_avatar_url,\n    login: user_name,\n    html_url: profile_link,\n  } = gist_owner;\n  // Get the Files Count\n  const files = Object.keys(gist_meta.files).length;\n  // Get Timestamps and format them\n  const created_at = new Date(gist_meta.created_at).toLocaleDateString(\"en-US\");\n  const updated_at = new Date(gist_meta.updated_at).toLocaleDateString(\"en-US\");\n\n  return (\n    <>\n      <GistWrapper>\n        <GistLeftMeta>\n          <Link href={profile_link} target=\"new\">\n            <UserImage src={avatar_url} alt=\"avatar\" />\n          </Link>\n          <Link href={profile_link} target=\"new\">\n            <UserName>{user_name}</UserName>\n          </Link>\n        </GistLeftMeta>\n        <GistRightMeta>\n          <Link href={gist_meta.html_url} target=\"new\">\n            <Octicon name=\"code\">\n              {files} {files <= 1 ? \"File \" : \"Files\"}\n            </Octicon>\n          </Link>\n          <Link href={`${gist_meta.html_url}/forks`} target=\"new\">\n            <Octicon name=\"repo-forked\"> Forks</Octicon>\n          </Link>\n          <Link href={`${gist_meta.html_url}/#comments`} target=\"new\">\n            <Octicon name=\"comment\"> {gist_meta.comments} Comments</Octicon>\n          </Link>\n          <Link href={`${gist_meta.html_url}/stargazers`} target=\"new\">\n            <Octicon name=\"star\"> Stars</Octicon>\n          </Link>\n        </GistRightMeta>\n      </GistWrapper>\n      <GistWrapper>\n        <span>\n          Created at: {created_at} &nbsp; Last updated: {updated_at}\n        </span>\n      </GistWrapper>\n    </>\n  );\n};\n\nconst UserImage = styled.img`\n  width: 30px;\n  height: 30px;\n  border-radius: 50%;\n`;\n\nconst UserName = styled.div`\n  margin-left: 10px;\n  cursor: pointer;\n`;\n\nconst GistMeta = styled.div`\n  color: #0366d6;\n  display: flex;\n  padding: 10px;\n  align-items: center;\n`;\nconst GistLeftMeta = styled(GistMeta)`\n  float: left;\n  width: 50%;\n  @media (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nconst GistRightMeta = styled(GistMeta)`\n  float: right;\n  width: 50%;\n  & > a,\n  & > span {\n    margin-right: 15px;\n  }\n  @media (max-width: 768px) {\n    float: left;\n    margin: 10px;\n    width: 100%;\n  }\n`;\nconst GistWrapper = styled.div`\n  display: flow-root;\n  width: 100%;\n  @media (max-width: 768px) {\n    display: block;\n  }\n  & > span {\n    padding-left: 15px;\n    width: 100%;\n    float: left;\n  }\n`;\nexport const Link = styled.a`\n  text-decoration: none;\n  color: #0366d6;\n`;\n\n// Props Params checking\nGistHeader.propTypes = {\n  gist_owner: PropTypes.object.isRequired,\n  gist_meta: PropTypes.object.isRequired,\n};\n\nexport default GistHeader;\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport Octicon from \"react-octicon\";\r\n// custom imports\r\nimport GistHeader, { Link } from \"./GistHeader\";\r\n\r\nconst Gist = ({ gist }) => {\r\n  // get owner/author data of the gist\r\n  const { owner: gist_owner } = gist;\r\n  // get the meta data of the gist\r\n  const {\r\n    description = \"\",\r\n    created_at,\r\n    updated_at,\r\n    files = {},\r\n    comments = 0,\r\n    forks_url,\r\n    comments_url,\r\n    html_url = \"#\",\r\n  } = gist;\r\n  // retrieve only File Names from the object of files\r\n  const fileNames = Object.keys(files);\r\n\r\n  return (\r\n    <>\r\n      <GistHeader\r\n        gist_owner={gist_owner}\r\n        gist_meta={{\r\n          created_at,\r\n          updated_at,\r\n          files,\r\n          comments,\r\n          comments_url,\r\n          forks_url,\r\n          html_url,\r\n        }}\r\n      />\r\n      <GistDescription>{description}</GistDescription>\r\n      <GistFiles>\r\n        {fileNames.map((f) => {\r\n          return (\r\n            <Link href={files[f].raw_url} target=\"new\" key={f}>\r\n              <Octicon name=\"file\">{f}</Octicon>\r\n            </Link>\r\n          );\r\n        })}\r\n      </GistFiles>\r\n      <Separator />\r\n    </>\r\n  );\r\n};\r\n\r\nconst GistDescription = styled.p`\r\n  padding-left: 15px;\r\n  width: 100%;\r\n  font-size: 17px;\r\n`;\r\n\r\nconst GistFiles = styled.div`\r\n  display: inline-block;\r\n  color: #0366d6;\r\n  width: 100%;\r\n  margin-left: 20px;\r\n  margin-bottom: 20px;\r\n  & > a {\r\n    margin-right: 15px;\r\n    padding: 5px;\r\n  }\r\n`;\r\nconst Separator = styled.hr`\r\n  border;0.5px solid lightgray;\r\n`;\r\n\r\nGist.propTypes = {\r\n  gist: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default Gist;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\n// custom imports\r\nimport { getPublicGists, getGistForUser } from \"../services/gistService\";\r\nimport Gist from \"./Gist\";\r\n\r\nconst GistList = ({ searchUserName }) => {\r\n  const [gists, setGists] = useState([]);\r\n  const [errorMsg, setErrorMsg] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // Clear Error Before the API Call\r\n    setErrorMsg(\"\");\r\n    // when trying to search the gists by User Name\r\n    if (searchUserName) {\r\n      getGistForUser(searchUserName)\r\n        .then((response) => {\r\n          setGists(response.data);\r\n          // if there are no gists then throw Error\r\n          if (response.data.length < 1) {\r\n            throw new Error(`No Gists Found for ${searchUserName}`);\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          // Set the Error Message in case of API call fails\r\n          // or there are no gists\r\n          setErrorMsg(err.message);\r\n        });\r\n\r\n      // when not searching by username\r\n    } else {\r\n      getPublicGists()\r\n        .then((response) => {\r\n          setGists(response.data);\r\n        })\r\n        .catch((err) => {\r\n          setErrorMsg(err.message);\r\n        });\r\n    }\r\n  }, [searchUserName]);\r\n\r\n  return (\r\n    <Wrapper>\r\n      {!errorMsg ? (\r\n        gists.map((gist) => {\r\n          return <Gist key={gist.id} gist={gist} />;\r\n        })\r\n      ) : (\r\n        <ErrorMessage>{errorMsg}</ErrorMessage>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  width: 60%;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    padding: 20px;\r\n  }\r\n`;\r\nconst ErrorMessage = styled.div`\r\n  text-align: center;\r\n  color: red;\r\n  font-size: xx-large;\r\n  margin: auto;\r\n`;\r\n// Prop Param Type Checking\r\nGistList.propTypes = {\r\n  searchUserName: PropTypes.string,\r\n};\r\n\r\nexport default GistList;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n// custom imports\r\nimport Header from \"./components/Header\";\r\nimport GlobalStyles from \"./GlobalStyle\";\r\nimport GistList from \"./components/GistList\";\r\n\r\nconst App = () => {\r\n  const [searchUserName, setSearchUserName] = useState(\"\");\r\n\r\n  return (\r\n    <Wrapper className=\"App\" data-testid=\"app\">\r\n      <Header setSearchTerm={setSearchUserName} />\r\n      <GlobalStyles />\r\n      <GistList searchUserName={searchUserName} />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n`;\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}